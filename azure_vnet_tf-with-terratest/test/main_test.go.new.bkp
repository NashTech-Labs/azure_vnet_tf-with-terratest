package main

// Import key modules.
import (
	"fmt"
	"os"
	"strings"
	"testing"

	"github.com/gruntwork-io/terratest/modules/random"
	"github.com/gruntwork-io/terratest/modules/terraform"
)

var (
	globalBackendConf = make(map[string]interface{})
	globalEnvVars     = make(map[string]string)
	uniquePostfix     = strings.ToLower(random.UniqueId())
	prefix            = "vnet"
	separator         = "-"
)

var (
	subscriptionId      = "8eacdf0e-3943-4c06-a2ff-0f2cda35cab6"
	resource_group_name = "test-rg"
)

func setTerraformVariables() (map[string]string, error) {

	// Getting enVars from environment variables
	ARM_CLIENT_ID := os.Getenv("AZURE_CLIENT_ID")
	ARM_CLIENT_SECRET := os.Getenv("AZURE_CLIENT_SECRET")
	ARM_TENANT_ID := os.Getenv("AZURE_TENANT_ID")
	ARM_SUBSCRIPTION_ID := os.Getenv("AZURE_SUBSCRIPTION_ID")

	// Creating globalEnVars for terraform call through Terratest
	if ARM_CLIENT_ID != "" {
		globalEnvVars["ARM_CLIENT_ID"] = ARM_CLIENT_ID
		globalEnvVars["ARM_CLIENT_SECRET"] = ARM_CLIENT_SECRET
		globalEnvVars["ARM_SUBSCRIPTION_ID"] = ARM_SUBSCRIPTION_ID
		globalEnvVars["ARM_TENANT_ID"] = ARM_TENANT_ID
	}

	return globalEnvVars, nil
}

func TestTerraform_azure_virtualNetwork(t *testing.T) {
	t.Parallel()
	setTerraformVariables()

	expectedLocation := "uksouth"
	//	expectedAddressSpace := []string{"10.0.0.0/24"}

	// Use Terratest to deploy the infrastructure
	terraformOptions := terraform.WithDefaultRetryableErrors(t, &terraform.Options{
		// Set the path to the Terraform code that will be tested.
		TerraformDir: "../provision",
		// Variables to pass to our Terraform code using -var options
		Vars: map[string]interface{}{
			"resource_group_name": resource_group_name,
			"location":            expectedLocation,
			"prefix":              prefix,
			"postfix":             uniquePostfix,
			//	"address_space":       expectedAddressSpace,
		},
		// globalvariables for user account
		EnvVars: globalEnvVars,
		// Backend values to set when initialziing Terraform
		BackendConfig: globalBackendConf,
		// Disable colors in Terraform commands so its easier to parse stdout/stderr
		NoColor: true,
		// Reconfigure is required if module deployment and go test pipelines are running in one stage
		Reconfigure: true,
	})
	// At the end of the test, run `terraform destroy` to clean up any resources that were created
	defer terraform.Destroy(t, terraformOptions)
	// Run `terraform init` and `terraform apply`. Fail the test if there are any errors
	terraform.InitAndApply(t, terraformOptions)
	expectedResourceName := terraform.Output(t, terraformOptions, "resource_name")

	fmt.Printf("ResourceName :: %s\n", expectedResourceName)
}
